#!/usr/bin/ruby

require "json"

class DisplayerBootstrap
  def initialize
    # deploy on first boot
    update_other unless deployments.keys.all?{|f| File.exist? f}
    # loop
    @conf_old = get_conf
    while sleep 0.2 #`inotifywait -e close_write /etc/displayer/conf`
      puts "loop"
      @conf = get_conf
      update_wifi if conf_diff.include_any? "wifi_ssid", "wifi_pass"
      update_other if conf_diff.include_any? "host", "path", "user", "pass"
      @conf_old = @conf.dup
    end
  end

  def update_wifi
    @status_wifi = "connecting to #{@conf["wifi_ssid"]} #{@conf["wifi_pass"]}"
    puts "update wifi"
    puts `echo ssid #{@conf["wifi_ssid"]}`
    puts `for f in /etc/NetworkManager/system-connections/*; do nmcli connection delete "$(basename "$f")"; done`
    puts `nmcli device wifi connect "#{@conf["wifi_ssid"]}" password "#{@conf["wifi_pass"]}"`
    puts "update wifi done"
    STDOUT.flush
    @status_wifi = "done connection"
  end

  def update_other
    puts "update other"
    deployments.each do |path, content|
      File.write path.to_s, content
    end
    puts "update other done"
  end

  def conf_diff
    @conf.collect do |name, value|
      name if value != @conf_old[name]
    end.compact
  end

  def get_conf
    JSON.parse File.read "/etc/displayer/conf"
  end

  def print_status
    [ "wifi",
      "",
      ""
    ].join("\n")
  end

  def deployments
    { "/opt/displayer/chrome-plugin/autologin.js":
      "document.getElementById('os_username').value = '#{@conf["user"]}';
        document.getElementById('os_password').value = '#{@conf["pass"]}';
        document.getElementsByClassName('login-form-container')[0].submit();",
      "/opt/displayer/chrome-plugin/manifest.json":
      '{
        "manifest_version": 2,
        "name": "autologin-file",
        "description": "generic auto login",
        "version": "0.0.2",
        "content_scripts": [
          {
            "matches": ["*://*/*"],
            "js": ["autologin.js"],
            "run_at": "document_end"
          }
        ],
        "permissions": [
          "activeTab",
          "storage"
        ]
      }',
      "/opt/displayer/display":
      "#!/bin/bash
      chromium --disable-infobars --enable-offline-auto-reload --disable-translate --load-extension=/opt/displayer/chrome-plugin --kiosk \"#{@conf["host"]}#{@conf["path"]}\""
    }
  end
end

class Array
  def include_any? *elements
    elements.any? do |element|
      self.include? element
    end
  end
end

DisplayerBootstrap.new
